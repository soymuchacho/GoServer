// Code generated by protoc-gen-go. DO NOT EDIT.
// source: redisrpc.proto

package redisrpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// test rpc
type TestRedisRequest struct {
	Test                 string   `protobuf:"bytes,1,opt,name=test,proto3" json:"test,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TestRedisRequest) Reset()         { *m = TestRedisRequest{} }
func (m *TestRedisRequest) String() string { return proto.CompactTextString(m) }
func (*TestRedisRequest) ProtoMessage()    {}
func (*TestRedisRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3143ba4424374db2, []int{0}
}

func (m *TestRedisRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TestRedisRequest.Unmarshal(m, b)
}
func (m *TestRedisRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TestRedisRequest.Marshal(b, m, deterministic)
}
func (m *TestRedisRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestRedisRequest.Merge(m, src)
}
func (m *TestRedisRequest) XXX_Size() int {
	return xxx_messageInfo_TestRedisRequest.Size(m)
}
func (m *TestRedisRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TestRedisRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TestRedisRequest proto.InternalMessageInfo

func (m *TestRedisRequest) GetTest() string {
	if m != nil {
		return m.Test
	}
	return ""
}

type TestRedisResponse struct {
	Reply                string   `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TestRedisResponse) Reset()         { *m = TestRedisResponse{} }
func (m *TestRedisResponse) String() string { return proto.CompactTextString(m) }
func (*TestRedisResponse) ProtoMessage()    {}
func (*TestRedisResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3143ba4424374db2, []int{1}
}

func (m *TestRedisResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TestRedisResponse.Unmarshal(m, b)
}
func (m *TestRedisResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TestRedisResponse.Marshal(b, m, deterministic)
}
func (m *TestRedisResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestRedisResponse.Merge(m, src)
}
func (m *TestRedisResponse) XXX_Size() int {
	return xxx_messageInfo_TestRedisResponse.Size(m)
}
func (m *TestRedisResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TestRedisResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TestRedisResponse proto.InternalMessageInfo

func (m *TestRedisResponse) GetReply() string {
	if m != nil {
		return m.Reply
	}
	return ""
}

func init() {
	proto.RegisterType((*TestRedisRequest)(nil), "redisrpc.TestRedisRequest")
	proto.RegisterType((*TestRedisResponse)(nil), "redisrpc.TestRedisResponse")
}

func init() { proto.RegisterFile("redisrpc.proto", fileDescriptor_3143ba4424374db2) }

var fileDescriptor_3143ba4424374db2 = []byte{
	// 136 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2b, 0x4a, 0x4d, 0xc9,
	0x2c, 0x2e, 0x2a, 0x48, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x80, 0xf1, 0x95, 0xd4,
	0xb8, 0x04, 0x42, 0x52, 0x8b, 0x4b, 0x82, 0x40, 0xfc, 0xa0, 0xd4, 0xc2, 0xd2, 0xd4, 0xe2, 0x12,
	0x21, 0x21, 0x2e, 0x96, 0x92, 0xd4, 0xe2, 0x12, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xce, 0x20, 0x30,
	0x5b, 0x49, 0x93, 0x4b, 0x10, 0x49, 0x5d, 0x71, 0x41, 0x7e, 0x5e, 0x71, 0xaa, 0x90, 0x08, 0x17,
	0x6b, 0x51, 0x6a, 0x41, 0x4e, 0x25, 0x54, 0x25, 0x84, 0x63, 0xe4, 0xcf, 0xc5, 0x0a, 0x56, 0x26,
	0xe4, 0xc6, 0xc5, 0x09, 0xd7, 0x23, 0x24, 0xa5, 0x07, 0x77, 0x03, 0xba, 0x85, 0x52, 0xd2, 0x58,
	0xe5, 0x20, 0x96, 0x28, 0x31, 0x24, 0xb1, 0x81, 0x1d, 0x6d, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff,
	0x58, 0x6c, 0x59, 0x9f, 0xc6, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RedisClient is the client API for Redis service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RedisClient interface {
	TestRedis(ctx context.Context, in *TestRedisRequest, opts ...grpc.CallOption) (*TestRedisResponse, error)
}

type redisClient struct {
	cc *grpc.ClientConn
}

func NewRedisClient(cc *grpc.ClientConn) RedisClient {
	return &redisClient{cc}
}

func (c *redisClient) TestRedis(ctx context.Context, in *TestRedisRequest, opts ...grpc.CallOption) (*TestRedisResponse, error) {
	out := new(TestRedisResponse)
	err := c.cc.Invoke(ctx, "/redisrpc.Redis/TestRedis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RedisServer is the server API for Redis service.
type RedisServer interface {
	TestRedis(context.Context, *TestRedisRequest) (*TestRedisResponse, error)
}

func RegisterRedisServer(s *grpc.Server, srv RedisServer) {
	s.RegisterService(&_Redis_serviceDesc, srv)
}

func _Redis_TestRedis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestRedisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedisServer).TestRedis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/redisrpc.Redis/TestRedis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedisServer).TestRedis(ctx, req.(*TestRedisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Redis_serviceDesc = grpc.ServiceDesc{
	ServiceName: "redisrpc.Redis",
	HandlerType: (*RedisServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TestRedis",
			Handler:    _Redis_TestRedis_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "redisrpc.proto",
}
