// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mysqlrpc.proto

package mysqlrpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// test rpc
type TestMysqlRequest struct {
	Test                 string   `protobuf:"bytes,1,opt,name=test,proto3" json:"test,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TestMysqlRequest) Reset()         { *m = TestMysqlRequest{} }
func (m *TestMysqlRequest) String() string { return proto.CompactTextString(m) }
func (*TestMysqlRequest) ProtoMessage()    {}
func (*TestMysqlRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e0a2545e249c56c, []int{0}
}

func (m *TestMysqlRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TestMysqlRequest.Unmarshal(m, b)
}
func (m *TestMysqlRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TestMysqlRequest.Marshal(b, m, deterministic)
}
func (m *TestMysqlRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestMysqlRequest.Merge(m, src)
}
func (m *TestMysqlRequest) XXX_Size() int {
	return xxx_messageInfo_TestMysqlRequest.Size(m)
}
func (m *TestMysqlRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TestMysqlRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TestMysqlRequest proto.InternalMessageInfo

func (m *TestMysqlRequest) GetTest() string {
	if m != nil {
		return m.Test
	}
	return ""
}

type TestMysqlResponse struct {
	Reply                string   `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TestMysqlResponse) Reset()         { *m = TestMysqlResponse{} }
func (m *TestMysqlResponse) String() string { return proto.CompactTextString(m) }
func (*TestMysqlResponse) ProtoMessage()    {}
func (*TestMysqlResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e0a2545e249c56c, []int{1}
}

func (m *TestMysqlResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TestMysqlResponse.Unmarshal(m, b)
}
func (m *TestMysqlResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TestMysqlResponse.Marshal(b, m, deterministic)
}
func (m *TestMysqlResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestMysqlResponse.Merge(m, src)
}
func (m *TestMysqlResponse) XXX_Size() int {
	return xxx_messageInfo_TestMysqlResponse.Size(m)
}
func (m *TestMysqlResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TestMysqlResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TestMysqlResponse proto.InternalMessageInfo

func (m *TestMysqlResponse) GetReply() string {
	if m != nil {
		return m.Reply
	}
	return ""
}

func init() {
	proto.RegisterType((*TestMysqlRequest)(nil), "mysqlrpc.TestMysqlRequest")
	proto.RegisterType((*TestMysqlResponse)(nil), "mysqlrpc.TestMysqlResponse")
}

func init() { proto.RegisterFile("mysqlrpc.proto", fileDescriptor_0e0a2545e249c56c) }

var fileDescriptor_0e0a2545e249c56c = []byte{
	// 136 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcb, 0xad, 0x2c, 0x2e,
	0xcc, 0x29, 0x2a, 0x48, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x80, 0xf1, 0x95, 0xd4,
	0xb8, 0x04, 0x42, 0x52, 0x8b, 0x4b, 0x7c, 0x41, 0xfc, 0xa0, 0xd4, 0xc2, 0xd2, 0xd4, 0xe2, 0x12,
	0x21, 0x21, 0x2e, 0x96, 0x92, 0xd4, 0xe2, 0x12, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xce, 0x20, 0x30,
	0x5b, 0x49, 0x93, 0x4b, 0x10, 0x49, 0x5d, 0x71, 0x41, 0x7e, 0x5e, 0x71, 0xaa, 0x90, 0x08, 0x17,
	0x6b, 0x51, 0x6a, 0x41, 0x4e, 0x25, 0x54, 0x25, 0x84, 0x63, 0xe4, 0xcf, 0xc5, 0x0a, 0x56, 0x26,
	0xe4, 0xc6, 0xc5, 0x09, 0xd7, 0x23, 0x24, 0xa5, 0x07, 0x77, 0x03, 0xba, 0x85, 0x52, 0xd2, 0x58,
	0xe5, 0x20, 0x96, 0x28, 0x31, 0x24, 0xb1, 0x81, 0x1d, 0x6d, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff,
	0x20, 0x73, 0x99, 0xf5, 0xc6, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MysqlClient is the client API for Mysql service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MysqlClient interface {
	TestMysql(ctx context.Context, in *TestMysqlRequest, opts ...grpc.CallOption) (*TestMysqlResponse, error)
}

type mysqlClient struct {
	cc *grpc.ClientConn
}

func NewMysqlClient(cc *grpc.ClientConn) MysqlClient {
	return &mysqlClient{cc}
}

func (c *mysqlClient) TestMysql(ctx context.Context, in *TestMysqlRequest, opts ...grpc.CallOption) (*TestMysqlResponse, error) {
	out := new(TestMysqlResponse)
	err := c.cc.Invoke(ctx, "/mysqlrpc.Mysql/TestMysql", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MysqlServer is the server API for Mysql service.
type MysqlServer interface {
	TestMysql(context.Context, *TestMysqlRequest) (*TestMysqlResponse, error)
}

func RegisterMysqlServer(s *grpc.Server, srv MysqlServer) {
	s.RegisterService(&_Mysql_serviceDesc, srv)
}

func _Mysql_TestMysql_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestMysqlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MysqlServer).TestMysql(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mysqlrpc.Mysql/TestMysql",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MysqlServer).TestMysql(ctx, req.(*TestMysqlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Mysql_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mysqlrpc.Mysql",
	HandlerType: (*MysqlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TestMysql",
			Handler:    _Mysql_TestMysql_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mysqlrpc.proto",
}
