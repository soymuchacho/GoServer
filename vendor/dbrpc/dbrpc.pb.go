// Code generated by protoc-gen-go.
// source: dbrpc.proto
// DO NOT EDIT!

/*
Package dbrpc is a generated protocol buffer package.

It is generated from these files:
	dbrpc.proto

It has these top-level messages:
	MsgTestDBRequest
	MsgTestDBResponse
	MsgRegisterReq
	MsgRegisterAck
	MsgHeartBeatReq
	MsgHeartBeatAck
*/
package dbrpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// test rpc
type MsgTestDBRequest struct {
	Test string `protobuf:"bytes,1,opt,name=test" json:"test,omitempty"`
}

func (m *MsgTestDBRequest) Reset()                    { *m = MsgTestDBRequest{} }
func (m *MsgTestDBRequest) String() string            { return proto.CompactTextString(m) }
func (*MsgTestDBRequest) ProtoMessage()               {}
func (*MsgTestDBRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *MsgTestDBRequest) GetTest() string {
	if m != nil {
		return m.Test
	}
	return ""
}

type MsgTestDBResponse struct {
	Reply string `protobuf:"bytes,1,opt,name=reply" json:"reply,omitempty"`
}

func (m *MsgTestDBResponse) Reset()                    { *m = MsgTestDBResponse{} }
func (m *MsgTestDBResponse) String() string            { return proto.CompactTextString(m) }
func (*MsgTestDBResponse) ProtoMessage()               {}
func (*MsgTestDBResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *MsgTestDBResponse) GetReply() string {
	if m != nil {
		return m.Reply
	}
	return ""
}

// login
type MsgRegisterReq struct {
	Peerid string `protobuf:"bytes,1,opt,name=peerid" json:"peerid,omitempty"`
}

func (m *MsgRegisterReq) Reset()                    { *m = MsgRegisterReq{} }
func (m *MsgRegisterReq) String() string            { return proto.CompactTextString(m) }
func (*MsgRegisterReq) ProtoMessage()               {}
func (*MsgRegisterReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *MsgRegisterReq) GetPeerid() string {
	if m != nil {
		return m.Peerid
	}
	return ""
}

type MsgRegisterAck struct {
	Result int32 `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
}

func (m *MsgRegisterAck) Reset()                    { *m = MsgRegisterAck{} }
func (m *MsgRegisterAck) String() string            { return proto.CompactTextString(m) }
func (*MsgRegisterAck) ProtoMessage()               {}
func (*MsgRegisterAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *MsgRegisterAck) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

// HeartBeat
type MsgHeartBeatReq struct {
	Peerid string `protobuf:"bytes,1,opt,name=peerid" json:"peerid,omitempty"`
}

func (m *MsgHeartBeatReq) Reset()                    { *m = MsgHeartBeatReq{} }
func (m *MsgHeartBeatReq) String() string            { return proto.CompactTextString(m) }
func (*MsgHeartBeatReq) ProtoMessage()               {}
func (*MsgHeartBeatReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *MsgHeartBeatReq) GetPeerid() string {
	if m != nil {
		return m.Peerid
	}
	return ""
}

type MsgHeartBeatAck struct {
}

func (m *MsgHeartBeatAck) Reset()                    { *m = MsgHeartBeatAck{} }
func (m *MsgHeartBeatAck) String() string            { return proto.CompactTextString(m) }
func (*MsgHeartBeatAck) ProtoMessage()               {}
func (*MsgHeartBeatAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func init() {
	proto.RegisterType((*MsgTestDBRequest)(nil), "dbrpc.msgTestDBRequest")
	proto.RegisterType((*MsgTestDBResponse)(nil), "dbrpc.msgTestDBResponse")
	proto.RegisterType((*MsgRegisterReq)(nil), "dbrpc.msgRegisterReq")
	proto.RegisterType((*MsgRegisterAck)(nil), "dbrpc.msgRegisterAck")
	proto.RegisterType((*MsgHeartBeatReq)(nil), "dbrpc.msgHeartBeatReq")
	proto.RegisterType((*MsgHeartBeatAck)(nil), "dbrpc.msgHeartBeatAck")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DB service

type DBClient interface {
	TestDBServer(ctx context.Context, in *MsgTestDBRequest, opts ...grpc.CallOption) (*MsgTestDBResponse, error)
	Register(ctx context.Context, in *MsgRegisterReq, opts ...grpc.CallOption) (*MsgRegisterAck, error)
	HeartBeat(ctx context.Context, opts ...grpc.CallOption) (DB_HeartBeatClient, error)
}

type dBClient struct {
	cc *grpc.ClientConn
}

func NewDBClient(cc *grpc.ClientConn) DBClient {
	return &dBClient{cc}
}

func (c *dBClient) TestDBServer(ctx context.Context, in *MsgTestDBRequest, opts ...grpc.CallOption) (*MsgTestDBResponse, error) {
	out := new(MsgTestDBResponse)
	err := grpc.Invoke(ctx, "/dbrpc.DB/TestDBServer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBClient) Register(ctx context.Context, in *MsgRegisterReq, opts ...grpc.CallOption) (*MsgRegisterAck, error) {
	out := new(MsgRegisterAck)
	err := grpc.Invoke(ctx, "/dbrpc.DB/Register", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBClient) HeartBeat(ctx context.Context, opts ...grpc.CallOption) (DB_HeartBeatClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_DB_serviceDesc.Streams[0], c.cc, "/dbrpc.DB/HeartBeat", opts...)
	if err != nil {
		return nil, err
	}
	x := &dBHeartBeatClient{stream}
	return x, nil
}

type DB_HeartBeatClient interface {
	Send(*MsgHeartBeatReq) error
	CloseAndRecv() (*MsgHeartBeatAck, error)
	grpc.ClientStream
}

type dBHeartBeatClient struct {
	grpc.ClientStream
}

func (x *dBHeartBeatClient) Send(m *MsgHeartBeatReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dBHeartBeatClient) CloseAndRecv() (*MsgHeartBeatAck, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(MsgHeartBeatAck)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for DB service

type DBServer interface {
	TestDBServer(context.Context, *MsgTestDBRequest) (*MsgTestDBResponse, error)
	Register(context.Context, *MsgRegisterReq) (*MsgRegisterAck, error)
	HeartBeat(DB_HeartBeatServer) error
}

func RegisterDBServer(s *grpc.Server, srv DBServer) {
	s.RegisterService(&_DB_serviceDesc, srv)
}

func _DB_TestDBServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTestDBRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServer).TestDBServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbrpc.DB/TestDBServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServer).TestDBServer(ctx, req.(*MsgTestDBRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DB_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbrpc.DB/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServer).Register(ctx, req.(*MsgRegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DB_HeartBeat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DBServer).HeartBeat(&dBHeartBeatServer{stream})
}

type DB_HeartBeatServer interface {
	SendAndClose(*MsgHeartBeatAck) error
	Recv() (*MsgHeartBeatReq, error)
	grpc.ServerStream
}

type dBHeartBeatServer struct {
	grpc.ServerStream
}

func (x *dBHeartBeatServer) SendAndClose(m *MsgHeartBeatAck) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dBHeartBeatServer) Recv() (*MsgHeartBeatReq, error) {
	m := new(MsgHeartBeatReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _DB_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dbrpc.DB",
	HandlerType: (*DBServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TestDBServer",
			Handler:    _DB_TestDBServer_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _DB_Register_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "HeartBeat",
			Handler:       _DB_HeartBeat_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "dbrpc.proto",
}

func init() { proto.RegisterFile("dbrpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 253 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0x86, 0x1b, 0x44, 0x2a, 0x7a, 0x20, 0xa0, 0x27, 0x28, 0x55, 0x26, 0xe4, 0x01, 0xa5, 0x4b,
	0x07, 0xd8, 0x58, 0x50, 0x42, 0x07, 0x66, 0xc3, 0x0b, 0xb4, 0xe9, 0x29, 0xaa, 0xd2, 0x10, 0xf7,
	0xee, 0x8a, 0xc4, 0x0b, 0xf2, 0x5c, 0x88, 0x38, 0xd0, 0x50, 0x22, 0x36, 0xff, 0xe7, 0xcf, 0xf6,
	0x7d, 0x67, 0x38, 0x5e, 0x2e, 0xd8, 0x65, 0x53, 0xc7, 0x95, 0x56, 0x18, 0xd6, 0xc1, 0xdc, 0xc0,
	0x79, 0x29, 0xf9, 0x0b, 0x89, 0xce, 0x52, 0x4b, 0x9b, 0x2d, 0x89, 0x22, 0xc2, 0xa1, 0x92, 0xe8,
	0x38, 0xb8, 0x0e, 0xe2, 0x81, 0xad, 0xd7, 0x66, 0x02, 0xc3, 0x16, 0x27, 0xae, 0x7a, 0x15, 0xc2,
	0x0b, 0x08, 0x99, 0xdc, 0xfa, 0xbd, 0x21, 0x7d, 0x30, 0x31, 0x9c, 0x96, 0x92, 0x5b, 0xca, 0x57,
	0xa2, 0xc4, 0x96, 0x36, 0x38, 0x82, 0xbe, 0x23, 0xe2, 0xd5, 0xb2, 0x01, 0x9b, 0xb4, 0x47, 0x26,
	0x59, 0xf1, 0x45, 0x32, 0xc9, 0x76, 0xed, 0x1f, 0x0f, 0x6d, 0x93, 0xcc, 0x04, 0xce, 0x4a, 0xc9,
	0x9f, 0x68, 0xce, 0x9a, 0xd2, 0x5c, 0xff, 0xbb, 0x74, 0xf8, 0x1b, 0x4d, 0xb2, 0xe2, 0xf6, 0x23,
	0x80, 0x83, 0x59, 0x8a, 0x8f, 0x70, 0xe2, 0x05, 0x9e, 0x89, 0xdf, 0x88, 0xf1, 0x6a, 0xea, 0x07,
	0xb2, 0x3f, 0x80, 0x68, 0xfc, 0x77, 0xc3, 0x1b, 0x9b, 0x1e, 0xde, 0xc3, 0xd1, 0x77, 0xc3, 0x78,
	0xb9, 0xe3, 0x5a, 0xba, 0x51, 0x47, 0x39, 0xc9, 0x0a, 0xd3, 0xc3, 0x07, 0x18, 0xfc, 0xf4, 0x85,
	0xa3, 0x1d, 0xd5, 0xf6, 0x8a, 0xba, 0xea, 0xf5, 0xf1, 0x38, 0x58, 0xf4, 0xeb, 0xbf, 0xbb, 0xfb,
	0x0c, 0x00, 0x00, 0xff, 0xff, 0x01, 0xd6, 0x10, 0x5a, 0xca, 0x01, 0x00, 0x00,
}
